{"version":3,"sources":["app/router.js","components/footer/styles.tsx","components/footer/index.tsx","app/styles.tsx","app/index.tsx","serviceWorker.js","index.tsx","styles/tokens.tsx"],"names":["HomePage","lazy","CoffeePage","DevPage","Router","useEffect","window","scrollTo","fallback","exact","path","component","spacing","tokens","font","color","FooterWrapper","styled","footer","natural","dark","size","xs","xxs","Footer","currentYear","Date","getFullYear","AppWrapper","div","BodyWrapper","main","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","breakpoint","mobile","tablet","desktop","blue","maize","light","pink","system","white","black","green","yellow","red","s","m","l","xl","xxl","xxxl","xxxxl","weight","bold","semi","regular"],"mappings":"kPAGMA,EAAWC,gBAAK,kBAAM,iCACtBC,EAAaD,gBAAK,kBAAM,iCACxBE,EAAUF,gBAAK,kBAAM,iCAoBZG,EAlBA,WAKb,OAJAC,qBAAU,WACRC,OAAOC,SAAS,EAAG,MAInB,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAS,IACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,UAAUC,UAAWT,IACvC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,OAAOC,UAAWR,Q,6MCftCS,EAAyBC,IAAzBD,QAASE,EAAgBD,IAAhBC,KAAMC,EAAUF,IAAVE,MAEVC,EAAgBC,IAAOC,OAAV,IACJH,EAAMI,QAAQC,KAErBN,EAAKO,KAAKC,GACZV,EAAQW,KCKNC,EAVQ,WACrB,IAAMC,GAAc,IAAIC,MAAOC,cAE/B,OACE,kBAACX,EAAD,8BACsBS,EADtB,wB,iRCNG,IAAMG,EAAaX,IAAOY,IAAV,KAOVC,EAAcb,IAAOc,KAAV,KCQTC,EAXK,WAClB,OACE,kBAACJ,EAAD,KACE,kBAACE,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCAcG,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2D,cCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCEnInB,kCAAO,IAAMjC,EAAS,CACpBkC,WAAY,CACVC,OAAQ,QACRC,OAAQ,QACRC,QAAS,UAEXnC,MAAO,CACLoC,KAAM,UACNC,MAAO,UACPjC,QAAS,CACPkC,MAAO,UACPjC,KAAM,WAERkC,KAAM,CACJD,MAAO,UACPjC,KAAM,WAERmC,OAAQ,CACNC,MAAO,UACPC,MAAO,UACPC,MAAO,UACPC,OAAQ,UACRC,IAAK,UACLT,KAAM,YAGVvC,QAAS,CACPW,IAAK,SACLD,GAAI,UACJuC,EAAG,WACHC,EAAG,OACHC,EAAG,UACHC,GAAI,SACJC,IAAK,UACLC,KAAM,OACNC,MAAO,WAETrD,KAAM,CACJO,KAAM,CACJC,GAAI,UACJuC,EAAG,WACHC,EAAG,OACHC,EAAG,UACHC,GAAI,UAENI,OAAQ,CACNC,KAAM,IACNC,KAAM,IACNC,QAAS,S","file":"static/js/main.527bff0b.chunk.js","sourcesContent":["import React, { lazy, Suspense, useEffect } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nconst HomePage = lazy(() => import(\"../views/homepage\"));\nconst CoffeePage = lazy(() => import(\"../views/coffeepage\"));\nconst DevPage = lazy(() => import(\"../views/devpage\"));\n\nconst Router = () => {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  });\n\n  return (\n    <BrowserRouter>\n      <Suspense fallback=\"\">\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/coffee\" component={CoffeePage} />\n          <Route exact path=\"/dev\" component={DevPage} />\n        </Switch>\n      </Suspense>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import styled from \"styled-components\";\nimport { tokens } from \"../../styles/tokens\";\n\nconst { spacing, font, color } = tokens;\n\nexport const FooterWrapper = styled.footer`\n  background-color: ${color.natural.dark};\n  color: inherit;\n  font-size: ${font.size.xs};\n  padding: ${spacing.xxs} 0;\n  text-align: center;\n`;\n","import React, { FC } from \"react\";\n\nimport { FooterWrapper } from \"./styles\";\n\nconst Footer: FC<{}> = () => {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <FooterWrapper>\n      Copyright Â© 2018 - {currentYear} prototype holdings\n    </FooterWrapper>\n  );\n};\n\nexport default Footer;\n","import styled from \"styled-components\";\n\nexport const AppWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  width: 100vw;\n  min-height: 100vh;\n`;\n\nexport const BodyWrapper = styled.main`\n  flex: 1;\n  display: flex;\n  flex-flow: column;\n`;\n","import React, { FC } from \"react\";\nimport Router from \"./router\";\nimport Footer from \"../components/footer\";\n\nimport { AppWrapper, BodyWrapper } from \"./styles\";\n\nconst App: FC<{}> = () => {\n  return (\n    <AppWrapper>\n      <BodyWrapper>\n        <Router />\n      </BodyWrapper>\n      <Footer />\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"animate.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n","export const tokens = {\n  breakpoint: {\n    mobile: \"620px\",\n    tablet: \"768px\",\n    desktop: \"1024px\",\n  },\n  color: {\n    blue: \"#262f3e\",\n    maize: \"#c6a351\",\n    natural: {\n      light: \"#f6f4f3\",\n      dark: \"#c7c7b9\",\n    },\n    pink: {\n      light: \"#c6ab9c\",\n      dark: \"#a66454\",\n    },\n    system: {\n      white: \"#f6f4f3\",\n      black: \"#292e3d\",\n      green: \"#71ac50\",\n      yellow: \"#eba335\",\n      red: \"#f44336\",\n      blue: \"#007bff\",\n    },\n  },\n  spacing: {\n    xxs: \"0.5rem\",\n    xs: \"0.75rem\",\n    s: \"0.875rem\",\n    m: \"1rem\",\n    l: \"1.25rem\" /**  l : 1.25rem / 20px  */,\n    xl: \"1.5rem\" /** xl: 1.5rem / 24px */,\n    xxl: \"1.75rem\" /** xxl: 1.75rem / 28px */,\n    xxxl: \"2rem\" /** xxxl: 2rem / 32px */,\n    xxxxl: \"2.25rem\" /** xxxxl: 2.25rem / 36px */,\n  },\n  font: {\n    size: {\n      xs: \"0.75rem\" /**  xs : 0.75rem / 12px  */,\n      s: \"0.875rem\" /**  s : 0.875rem / 14px  */,\n      m: \"1rem\" /**  m : 1rem / 16px  */,\n      l: \"1.25rem\" /**  l : 1.25rem / 20px  */,\n      xl: \"1.5rem\" /**  xl : 1.5rem / 24px  */,\n    },\n    weight: {\n      bold: 700,\n      semi: 600,\n      regular: 400,\n    },\n  },\n};\n"],"sourceRoot":""}